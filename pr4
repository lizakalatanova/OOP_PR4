import java.util.*;

public class Task4 {
    public static void main(String[] args) {
        Scanner c = new Scanner(System.in);
        List<Integer> chisl = new ArrayList<Integer>();
        List<Integer> chisl2 = new ArrayList<Integer>();
        List<Integer> chisl6 = new ArrayList<Integer>();
        /////№1
        while (c.hasNextInt()) {
            int chislo1 = c.nextInt();
            chisl.add(chislo1);
        }
        System.out.println(sevenBoom(chisl));
        /////№2
        c = new Scanner(System.in);
        while (c.hasNextInt()) {
            int chislo2 = c.nextInt();
            chisl2.add(chislo2);
        }
        System.out.println(cons(chisl2));
        /////№3
        c = new Scanner(System.in);
        String str = c.nextLine();
        System.out.println(unmix(str));
        /////№4
        c = new Scanner(System.in);
        String st = c.nextLine();
        System.out.println(noYelling(st));
        /////№5
        c = new Scanner(System.in);
        String st5 = c.nextLine();
        System.out.println(xPronounce(st5));
        /////№6
        c = new Scanner(System.in);
        while (c.hasNextInt()) {
            int chislo6 = c.nextInt();
            chisl6.add(chislo6);
        }
        System.out.println(largestGap(chisl6));
        /////№7
        c = new Scanner(System.in);
        int a = c.nextInt();
        System.out.println(raz(a));
        /////№7
        c = new Scanner(System.in);
        String st7 = c.nextLine();
        System.out.println(commonLastVowel(st7));
        /////№9
        c = new Scanner(System.in);
        int a8 = c.nextInt();
        int b8 = c.nextInt();
        System.out.println(memeSum(a8,b8));
        /////№10
        c = new Scanner(System.in);
        String st10 = c.nextLine();
        System.out.println(unrepeated(st10));
    }
    public static String sevenBoom(List<Integer> chi){ // проверка на наличие 7
        if (chi.contains(7) == true)
            return "Boom";
        else
            return "there is no 7 in the array";
    }
    public static boolean cons(List<Integer> chisla) { // могут ли элементы в массиве быть переупорядочены, чтобы сформировать последовательный список чисел
        Collections.sort(chisla);
        for (int i = 0; i < chisla.size() - 1; ++i) {
            if (chisla.get(i + 1) - chisla.get(i) != 1 )
                return false;
        }
        return true;
    }
    public static void swap(char[] arr, int i, int j) { // смена элементов
        char tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    public static String unmix(String s){ // каждая пара символов поменялась местами
        char[] arr = s.toCharArray();
        for (int i = 0; i < arr.length-1; i=i+2){
            swap(arr,i,i+1);
        }
        return new String(arr);
    }
    public static String noYelling(String str){ // убирает !? в конце предложения
        char[] arr = str.toCharArray();
        int a = arr.length-1;
        if (arr[a] == '!') {
            while (arr[a - 1] == '!') {
                a = a - 1;
            }
        }
        else if (arr[a] == '?'){
            while (arr[a - 1] == '?') {
                a = a - 1;
            }
        }
        char[] arr1 = new char[a+1];
        for (int i = 0; i < a+1; i++){
            arr1[i]=arr[i];
        }
        return new String(arr1);
    }
    public static String xPronounce(String text) { //заменяет все x в строке следующими способами
        String[] arr = text.split(" ");
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].length() > 1 && arr[i].startsWith("x")) {
                arr[i] = "z" + arr[i].substring(1);
            }
            else if (arr[i].equals("x"))
                arr[i] = "ecks";
            else if (arr[i].contains("x")){
                arr[i]=arr[i].replace("x", "cks");
            }
        }
        return String.join(" ", arr);
    }
    public static int largestGap(List<Integer> chisl6) { //наибольший разрыв между отсортированными элементами массива
        Collections.sort(chisl6);
        System.out.println(chisl6);
        int interval = Integer.MIN_VALUE;
        for (int i = 0; i < chisl6.size() - 1; i++) {
            if (chisl6.get(i + 1) - chisl6.get(i) > interval)
                interval = chisl6.get(i + 1) - chisl6.get(i);
        }
        return interval;
    }
    public static int raz (int a) { // вычитание из числа сортированным числом
        String num = String.valueOf(a);
        int a1 = a;
        int a2 = 0;
        int aa = 1;
        int result[] = new int[num.length()];
        for (int i = num.length()-1; i >= 0; i--) {
            result[i] = a1 % 10;
            a1 /= 10;
        }
        Arrays.sort(result);
        for (int i = num.length()-1; i >= 0; i--) {
            a2 += result[i] * aa;
            aa = aa*10;
        }
        return a-a2;
    }
    public static char commonLastVowel(String S) { //последняя гласная
        String s = S.toLowerCase();
        char[] arr = s.toCharArray();
        int count = arr.length-1;
        for (int i = count; i >= 0; i--) {
         if (arr[i] =='a' || arr[i] =='e' || arr[i]=='i' || arr[i]=='o' || arr[i]=='u' || arr[i]=='y')
            {return arr[i];}
        }
        return 0;
    }
    public static int memeSum (int a, int b){ // сложение столбиком
        String num;
        if (a>b) { num = String.valueOf(a);}
        else { num = String.valueOf(b);}
        int a1 = a;
        int b1 = b;
        String resul = "";
        int result[] = new int[num.length()];
        int result1[] = new int[num.length()];
        int res[] = new int[num.length()];
        for (int i = num.length()-1; i >= 0; i--) {
            result[i] = a1 % 10;
            a1 /= 10;
        }
        for (int i = num.length()-1; i >= 0; i--) {
            result1[i] = b1 % 10;
            b1 /= 10;
        }
        for (int i=0; i<num.length();i++){
            res[i]=result1[i]+result[i];
        }
        for (int i = 0; i <num.length(); i++) {
            resul += Integer.toString(res[i]);
        }
        return Integer.parseInt(resul);
    }
    public static String unrepeated(String str) { // удаление повторяющихся символов
        String res = "";
        for (int i = 0; i < str.length(); i++) {
            if (!res.contains(String.valueOf(str.charAt(i)))) {
                res += str.charAt(i);
            }
        }
        return res;
    }
}
